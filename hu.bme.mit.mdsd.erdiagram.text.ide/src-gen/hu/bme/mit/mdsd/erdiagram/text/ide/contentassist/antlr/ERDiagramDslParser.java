/*
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.mdsd.erdiagram.text.ide.contentassist.antlr;

import com.google.inject.Inject;
import hu.bme.mit.mdsd.erdiagram.text.ide.contentassist.antlr.internal.InternalERDiagramDslParser;
import hu.bme.mit.mdsd.erdiagram.text.services.ERDiagramDslGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class ERDiagramDslParser extends AbstractContentAssistParser {

	@Inject
	private ERDiagramDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalERDiagramDslParser createParser() {
		InternalERDiagramDslParser result = new InternalERDiagramDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
					put(grammarAccess.getMultiplicityTypeAccess().getAlternatives(), "rule__MultiplicityType__Alternatives");
					put(grammarAccess.getERDiagramAccess().getGroup(), "rule__ERDiagram__Group__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
					put(grammarAccess.getEntityAccess().getGroup_3(), "rule__Entity__Group_3__0");
					put(grammarAccess.getEntityAccess().getGroup_3_2(), "rule__Entity__Group_3_2__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
					put(grammarAccess.getRelationEndingAccess().getGroup(), "rule__RelationEnding__Group__0");
					put(grammarAccess.getERDiagramAccess().getEntitiesAssignment_0(), "rule__ERDiagram__EntitiesAssignment_0");
					put(grammarAccess.getERDiagramAccess().getRelationAssignment_1(), "rule__ERDiagram__RelationAssignment_1");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getIsAAssignment_2_1(), "rule__Entity__IsAAssignment_2_1");
					put(grammarAccess.getEntityAccess().getAttributesAssignment_3_1(), "rule__Entity__AttributesAssignment_3_1");
					put(grammarAccess.getEntityAccess().getAttributesAssignment_3_2_1(), "rule__Entity__AttributesAssignment_3_2_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
					put(grammarAccess.getAttributeAccess().getIsKeyAssignment_3(), "rule__Attribute__IsKeyAssignment_3");
					put(grammarAccess.getRelationAccess().getLeftEndingAssignment_0(), "rule__Relation__LeftEndingAssignment_0");
					put(grammarAccess.getRelationAccess().getRightEndingAssignment_2(), "rule__Relation__RightEndingAssignment_2");
					put(grammarAccess.getRelationEndingAccess().getMultiplicityAssignment_0_0(), "rule__RelationEnding__MultiplicityAssignment_0_0");
					put(grammarAccess.getRelationEndingAccess().getNullableAssignment_0_1(), "rule__RelationEnding__NullableAssignment_0_1");
					put(grammarAccess.getRelationEndingAccess().getTargetAssignment_1(), "rule__RelationEnding__TargetAssignment_1");
					put(grammarAccess.getRelationEndingAccess().getUnorderedGroup_0(), "rule__RelationEnding__UnorderedGroup_0");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalERDiagramDslParser typedParser = (InternalERDiagramDslParser) parser;
			typedParser.entryRuleERDiagram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ERDiagramDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ERDiagramDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
