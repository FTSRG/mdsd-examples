/*
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.mdsd.erdiagram.text.serializer;

import com.google.inject.Inject;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.Attribute;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.ERDiagram;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.ERDiagramDslPackage;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.Entity;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.Relation;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.RelationEnding;
import hu.bme.mit.mdsd.erdiagram.text.services.ERDiagramDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ERDiagramDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ERDiagramDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ERDiagramDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ERDiagramDslPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case ERDiagramDslPackage.ER_DIAGRAM:
				sequence_ERDiagram(context, (ERDiagram) semanticObject); 
				return; 
			case ERDiagramDslPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case ERDiagramDslPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			case ERDiagramDslPackage.RELATION_ENDING:
				sequence_RelationEnding(context, (RelationEnding) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=AttributeType isKey?='key'?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ERDiagram returns ERDiagram
	 *
	 * Constraint:
	 *     ((entities+=Entity+ relation+=Relation+) | relation+=Relation+)?
	 */
	protected void sequence_ERDiagram(ISerializationContext context, ERDiagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID isA+=[Entity|ID]* (attributes+=Attribute attributes+=Attribute*)?)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationEnding returns RelationEnding
	 *
	 * Constraint:
	 *     ((multiplicity=MultiplicityType | nullable?='nullable')* target=[Entity|ID])
	 */
	protected void sequence_RelationEnding(ISerializationContext context, RelationEnding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Relation
	 *
	 * Constraint:
	 *     (leftEnding=RelationEnding rightEnding=RelationEnding)
	 */
	protected void sequence_Relation(ISerializationContext context, Relation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ERDiagramDslPackage.Literals.RELATION__LEFT_ENDING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ERDiagramDslPackage.Literals.RELATION__LEFT_ENDING));
			if (transientValues.isValueTransient(semanticObject, ERDiagramDslPackage.Literals.RELATION__RIGHT_ENDING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ERDiagramDslPackage.Literals.RELATION__RIGHT_ENDING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getLeftEndingRelationEndingParserRuleCall_0_0(), semanticObject.getLeftEnding());
		feeder.accept(grammarAccess.getRelationAccess().getRightEndingRelationEndingParserRuleCall_2_0(), semanticObject.getRightEnding());
		feeder.finish();
	}
	
	
}
