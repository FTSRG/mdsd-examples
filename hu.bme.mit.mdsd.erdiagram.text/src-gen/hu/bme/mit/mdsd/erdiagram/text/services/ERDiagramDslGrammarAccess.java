/*
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.mdsd.erdiagram.text.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ERDiagramDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ERDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.ERDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntitiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_0_0 = (RuleCall)cEntitiesAssignment_0.eContents().get(0);
		private final Assignment cRelationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationRelationParserRuleCall_1_0 = (RuleCall)cRelationAssignment_1.eContents().get(0);
		
		//ERDiagram:
		//	entities+=Entity*
		//	relation+=Relation*;
		@Override public ParserRule getRule() { return rule; }
		
		//entities+=Entity* relation+=Relation*
		public Group getGroup() { return cGroup; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment_0() { return cEntitiesAssignment_0; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0_0() { return cEntitiesEntityParserRuleCall_0_0; }
		
		//relation+=Relation*
		public Assignment getRelationAssignment_1() { return cRelationAssignment_1; }
		
		//Relation
		public RuleCall getRelationRelationParserRuleCall_1_0() { return cRelationRelationParserRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsAKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIsAAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cIsAEntityCrossReference_2_1_0 = (CrossReference)cIsAAssignment_2_1.eContents().get(0);
		private final RuleCall cIsAEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cIsAEntityCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cAttributesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_2_1_0 = (RuleCall)cAttributesAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Entity:
		//	'entity' name=ID ('isA' isA+=[Entity])* ('{'
		//	attributes+=Attribute (',' attributes+=Attribute)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID ('isA' isA+=[Entity])* ('{' attributes+=Attribute (',' attributes+=Attribute)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('isA' isA+=[Entity])*
		public Group getGroup_2() { return cGroup_2; }
		
		//'isA'
		public Keyword getIsAKeyword_2_0() { return cIsAKeyword_2_0; }
		
		//isA+=[Entity]
		public Assignment getIsAAssignment_2_1() { return cIsAAssignment_2_1; }
		
		//[Entity]
		public CrossReference getIsAEntityCrossReference_2_1_0() { return cIsAEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getIsAEntityIDTerminalRuleCall_2_1_0_1() { return cIsAEntityIDTerminalRuleCall_2_1_0_1; }
		
		//('{' attributes+=Attribute (',' attributes+=Attribute)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_1_0() { return cAttributesAttributeParserRuleCall_3_1_0; }
		
		//(',' attributes+=Attribute)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_3_2_1() { return cAttributesAssignment_3_2_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_2_1_0() { return cAttributesAttributeParserRuleCall_3_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAttributeTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cIsKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsKeyKeyKeyword_3_0 = (Keyword)cIsKeyAssignment_3.eContents().get(0);
		
		//Attribute:
		//	name=ID ':' type=AttributeType isKey?='key'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=AttributeType isKey?='key'?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeEnumRuleCall_2_0() { return cTypeAttributeTypeEnumRuleCall_2_0; }
		
		//isKey?='key'?
		public Assignment getIsKeyAssignment_3() { return cIsKeyAssignment_3; }
		
		//'key'
		public Keyword getIsKeyKeyKeyword_3_0() { return cIsKeyKeyKeyword_3_0; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftEndingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftEndingRelationEndingParserRuleCall_0_0 = (RuleCall)cLeftEndingAssignment_0.eContents().get(0);
		private final Keyword cIsRelatedWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightEndingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightEndingRelationEndingParserRuleCall_2_0 = (RuleCall)cRightEndingAssignment_2.eContents().get(0);
		
		//Relation:
		//	leftEnding=RelationEnding
		//	'is related with'
		//	rightEnding=RelationEnding;
		@Override public ParserRule getRule() { return rule; }
		
		//leftEnding=RelationEnding 'is related with' rightEnding=RelationEnding
		public Group getGroup() { return cGroup; }
		
		//leftEnding=RelationEnding
		public Assignment getLeftEndingAssignment_0() { return cLeftEndingAssignment_0; }
		
		//RelationEnding
		public RuleCall getLeftEndingRelationEndingParserRuleCall_0_0() { return cLeftEndingRelationEndingParserRuleCall_0_0; }
		
		//'is related with'
		public Keyword getIsRelatedWithKeyword_1() { return cIsRelatedWithKeyword_1; }
		
		//rightEnding=RelationEnding
		public Assignment getRightEndingAssignment_2() { return cRightEndingAssignment_2; }
		
		//RelationEnding
		public RuleCall getRightEndingRelationEndingParserRuleCall_2_0() { return cRightEndingRelationEndingParserRuleCall_2_0; }
	}
	public class RelationEndingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.RelationEnding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cMultiplicityAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cMultiplicityMultiplicityTypeEnumRuleCall_0_0_0 = (RuleCall)cMultiplicityAssignment_0_0.eContents().get(0);
		private final Assignment cNullableAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cNullableNullableKeyword_0_1_0 = (Keyword)cNullableAssignment_0_1.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetEntityCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetEntityCrossReference_1_0.eContents().get(1);
		
		//RelationEnding:
		//	(multiplicity=MultiplicityType & nullable?='nullable'?) target=[Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//(multiplicity=MultiplicityType & nullable?='nullable'?) target=[Entity]
		public Group getGroup() { return cGroup; }
		
		//(multiplicity=MultiplicityType & nullable?='nullable'?)
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//multiplicity=MultiplicityType
		public Assignment getMultiplicityAssignment_0_0() { return cMultiplicityAssignment_0_0; }
		
		//MultiplicityType
		public RuleCall getMultiplicityMultiplicityTypeEnumRuleCall_0_0_0() { return cMultiplicityMultiplicityTypeEnumRuleCall_0_0_0; }
		
		//nullable?='nullable'?
		public Assignment getNullableAssignment_0_1() { return cNullableAssignment_0_1; }
		
		//'nullable'
		public Keyword getNullableNullableKeyword_0_1_0() { return cNullableNullableKeyword_0_1_0; }
		
		//target=[Entity]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[Entity]
		public CrossReference getTargetEntityCrossReference_1_0() { return cTargetEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetEntityIDTerminalRuleCall_1_0_1() { return cTargetEntityIDTerminalRuleCall_1_0_1; }
	}
	
	public class AttributeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTIntKeyword_0_0 = (Keyword)cINTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDOUBLEDoubleKeyword_1_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTRINGStringKeyword_2_0 = (Keyword)cSTRINGEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBOOLEANBooleanKeyword_3_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDATETIMEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDATETIMEDatetimeKeyword_4_0 = (Keyword)cDATETIMEEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum AttributeType:
		//	INT='int' | DOUBLE='double' | STRING='string' | BOOLEAN='boolean' | DATETIME='datetime';
		public EnumRule getRule() { return rule; }
		
		//INT='int' | DOUBLE='double' | STRING='string' | BOOLEAN='boolean' | DATETIME='datetime'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT='int'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_0() { return cINTEnumLiteralDeclaration_0; }
		
		//'int'
		public Keyword getINTIntKeyword_0_0() { return cINTIntKeyword_0_0; }
		
		//DOUBLE='double'
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_1() { return cDOUBLEEnumLiteralDeclaration_1; }
		
		//'double'
		public Keyword getDOUBLEDoubleKeyword_1_0() { return cDOUBLEDoubleKeyword_1_0; }
		
		//STRING='string'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_2() { return cSTRINGEnumLiteralDeclaration_2; }
		
		//'string'
		public Keyword getSTRINGStringKeyword_2_0() { return cSTRINGStringKeyword_2_0; }
		
		//BOOLEAN='boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_3() { return cBOOLEANEnumLiteralDeclaration_3; }
		
		//'boolean'
		public Keyword getBOOLEANBooleanKeyword_3_0() { return cBOOLEANBooleanKeyword_3_0; }
		
		//DATETIME='datetime'
		public EnumLiteralDeclaration getDATETIMEEnumLiteralDeclaration_4() { return cDATETIMEEnumLiteralDeclaration_4; }
		
		//'datetime'
		public Keyword getDATETIMEDatetimeKeyword_4_0() { return cDATETIMEDatetimeKeyword_4_0; }
	}
	public class MultiplicityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.MultiplicityType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneOneKeyword_0_0 = (Keyword)cOneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cManyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cManyManyKeyword_1_0 = (Keyword)cManyEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MultiplicityType:
		//	One='one' | Many='many';
		public EnumRule getRule() { return rule; }
		
		//One='one' | Many='many'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//One='one'
		public EnumLiteralDeclaration getOneEnumLiteralDeclaration_0() { return cOneEnumLiteralDeclaration_0; }
		
		//'one'
		public Keyword getOneOneKeyword_0_0() { return cOneOneKeyword_0_0; }
		
		//Many='many'
		public EnumLiteralDeclaration getManyEnumLiteralDeclaration_1() { return cManyEnumLiteralDeclaration_1; }
		
		//'many'
		public Keyword getManyManyKeyword_1_0() { return cManyManyKeyword_1_0; }
	}
	
	private final ERDiagramElements pERDiagram;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final AttributeTypeElements eAttributeType;
	private final RelationElements pRelation;
	private final RelationEndingElements pRelationEnding;
	private final MultiplicityTypeElements eMultiplicityType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ERDiagramDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pERDiagram = new ERDiagramElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.eAttributeType = new AttributeTypeElements();
		this.pRelation = new RelationElements();
		this.pRelationEnding = new RelationEndingElements();
		this.eMultiplicityType = new MultiplicityTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ERDiagram:
	//	entities+=Entity*
	//	relation+=Relation*;
	public ERDiagramElements getERDiagramAccess() {
		return pERDiagram;
	}
	
	public ParserRule getERDiagramRule() {
		return getERDiagramAccess().getRule();
	}
	
	//Entity:
	//	'entity' name=ID ('isA' isA+=[Entity])* ('{'
	//	attributes+=Attribute (',' attributes+=Attribute)*
	//	'}')?;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Attribute:
	//	name=ID ':' type=AttributeType isKey?='key'?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//enum AttributeType:
	//	INT='int' | DOUBLE='double' | STRING='string' | BOOLEAN='boolean' | DATETIME='datetime';
	public AttributeTypeElements getAttributeTypeAccess() {
		return eAttributeType;
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//Relation:
	//	leftEnding=RelationEnding
	//	'is related with'
	//	rightEnding=RelationEnding;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//RelationEnding:
	//	(multiplicity=MultiplicityType & nullable?='nullable'?) target=[Entity];
	public RelationEndingElements getRelationEndingAccess() {
		return pRelationEnding;
	}
	
	public ParserRule getRelationEndingRule() {
		return getRelationEndingAccess().getRule();
	}
	
	//enum MultiplicityType:
	//	One='one' | Many='many';
	public MultiplicityTypeElements getMultiplicityTypeAccess() {
		return eMultiplicityType;
	}
	
	public EnumRule getMultiplicityTypeRule() {
		return getMultiplicityTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
