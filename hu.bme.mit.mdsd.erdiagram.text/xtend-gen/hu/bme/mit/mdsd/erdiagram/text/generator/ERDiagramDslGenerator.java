/**
 * generated by Xtext 2.20.0
 */
package hu.bme.mit.mdsd.erdiagram.text.generator;

import com.google.common.collect.Iterables;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.Attribute;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.AttributeType;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.ERDiagram;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.Entity;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.Relation;
import java.util.HashSet;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ERDiagramDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final ERDiagram diagram = ((ERDiagram) _get);
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Entity> _entities = diagram.getEntities();
      for(final Entity entity : _entities) {
        _builder.append("CREATE TABLE ");
        String _name = entity.getName();
        _builder.append(_name);
        _builder.append(" (");
        _builder.newLineIfNotEmpty();
        {
          final Function1<Attribute, Boolean> _function = (Attribute it) -> {
            return Boolean.valueOf(it.isIsTransient());
          };
          Iterable<Attribute> _reject = IterableExtensions.<Attribute>reject(this.getAllAttributes(entity), _function);
          boolean _hasElements = false;
          for(final Attribute attribute : _reject) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            _builder.append("\t");
            String _name_1 = attribute.getName();
            _builder.append(_name_1, "\t");
            _builder.append(" ");
            String _transformType = this.transformType(attribute.getType());
            _builder.append(_transformType, "\t");
            _builder.append(" ");
            {
              Attribute _key = entity.getKey();
              boolean _tripleEquals = (attribute == _key);
              if (_tripleEquals) {
                _builder.append("PRIMARY KEY");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append(");");
        _builder.newLine();
      }
    }
    {
      EList<Relation> _relation = diagram.getRelation();
      for(final Relation relation : _relation) {
        _builder.append("CREATE TABLE ");
        CharSequence _name_2 = this.getName(relation);
        _builder.append(_name_2);
        _builder.append(" (");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _name_3 = this.getLeftEndingKey(relation).getName();
        _builder.append(_name_3, "\t");
        _builder.append(" ");
        String _transformType_1 = this.transformType(this.getLeftEndingKey(relation).getType());
        _builder.append(_transformType_1, "\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("CONSTRAINT fk_");
        String _name_4 = this.getLeftEndingKey(relation).getName();
        _builder.append(_name_4, "\t");
        _builder.append(" FOREIGN KEY (");
        String _name_5 = this.getLeftEndingKey(relation).getName();
        _builder.append(_name_5, "\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("REFERENCES ");
        String _name_6 = this.getLeftEndingEntity(relation).getName();
        _builder.append(_name_6, "\t\t");
        _builder.append("(");
        String _name_7 = this.getLeftEndingKey(relation).getName();
        _builder.append(_name_7, "\t\t");
        _builder.append("),");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _name_8 = this.getRightEndingKey(relation).getName();
        _builder.append(_name_8, "\t");
        _builder.append(" ");
        String _transformType_2 = this.transformType(this.getRightEndingKey(relation).getType());
        _builder.append(_transformType_2, "\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("CONSTRAINT fk_");
        String _name_9 = this.getRightEndingKey(relation).getName();
        _builder.append(_name_9, "\t");
        _builder.append(" FOREIGN KEY (");
        String _name_10 = this.getRightEndingKey(relation).getName();
        _builder.append(_name_10, "\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("REFERENCES ");
        String _name_11 = this.getRightEndingEntity(relation).getName();
        _builder.append(_name_11, "\t\t");
        _builder.append("(");
        String _name_12 = this.getRightEndingKey(relation).getName();
        _builder.append(_name_12, "\t\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append(");");
        _builder.newLine();
      }
    }
    fsa.generateFile("er.sql", _builder);
  }
  
  private Set<Attribute> getAllAttributes(final Entity entity) {
    final HashSet<Attribute> attributes = CollectionLiterals.<Attribute>newHashSet();
    EList<Attribute> _attributes = entity.getAttributes();
    Iterables.<Attribute>addAll(attributes, _attributes);
    EList<Entity> _isA = entity.getIsA();
    for (final Entity parent : _isA) {
      Set<Attribute> _allAttributes = this.getAllAttributes(parent);
      Iterables.<Attribute>addAll(attributes, _allAttributes);
    }
    return attributes;
  }
  
  private String transformType(final AttributeType type) {
    if (type != null) {
      switch (type) {
        case BOOLEAN:
          return "bit";
        case DATETIME:
          return "datetime";
        case DOUBLE:
          return "real";
        case INT:
          return "int";
        case STRING:
          return "varchar(255)";
        default:
          break;
      }
    }
    return null;
  }
  
  private CharSequence getName(final Relation relation) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = this.getLeftEndingEntity(relation).getName();
    _builder.append(_name);
    _builder.append("To");
    String _name_1 = this.getRightEndingEntity(relation).getName();
    _builder.append(_name_1);
    return _builder;
  }
  
  private Entity getLeftEndingEntity(final Relation relation) {
    return relation.getLeftEnding().getTarget();
  }
  
  private Attribute getLeftEndingKey(final Relation relation) {
    return this.getLeftEndingEntity(relation).getKey();
  }
  
  private Entity getRightEndingEntity(final Relation relation) {
    return relation.getRightEnding().getTarget();
  }
  
  private Attribute getRightEndingKey(final Relation relation) {
    return this.getRightEndingEntity(relation).getKey();
  }
}
