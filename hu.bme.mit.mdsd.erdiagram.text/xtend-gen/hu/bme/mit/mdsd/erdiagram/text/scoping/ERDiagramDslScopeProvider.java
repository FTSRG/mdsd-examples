/**
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.mdsd.erdiagram.text.scoping;

import com.google.common.base.Objects;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.ERDiagram;
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.Entity;
import hu.bme.mit.mdsd.erdiagram.text.scoping.AbstractERDiagramDslScopeProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class ERDiagramDslScopeProvider extends AbstractERDiagramDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if ((context instanceof Entity)) {
      EObject _eContainer = ((Entity)context).eContainer();
      EList<Entity> _entities = ((ERDiagram) _eContainer).getEntities();
      final Function1<Entity, Boolean> _function = (Entity x) -> {
        return Boolean.valueOf((!Objects.equal(x, context)));
      };
      Iterable<Entity> _filter = IterableExtensions.<Entity>filter(_entities, _function);
      return Scopes.scopeFor(_filter);
    }
    return super.getScope(context, reference);
  }
}
