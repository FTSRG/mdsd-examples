/*
 * generated by Xtext 2.20.0
 */
package hu.bme.mit.mdsd.erdiagram.text.generator

import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.Attribute
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.AttributeType
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.ERDiagram
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.Entity
import java.util.Set
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import hu.bme.mit.mdsd.erdiagram.text.eRDiagramDsl.Relation

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ERDiagramDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val diagram = resource.contents.get(0) as ERDiagram
		fsa.generateFile('er.sql', '''
			«FOR entity : diagram.entities»
				CREATE TABLE «entity.name» (
					«FOR attribute : entity.allAttributes SEPARATOR ', '»
						«attribute.name» «attribute.type.transformType» «IF attribute.isIsKey»PRIMARY KEY«ENDIF»
					«ENDFOR»
				);
			«ENDFOR»
			«FOR relation : diagram.relation»
				CREATE TABLE «relation.name» (
					«relation.leftEndingKey.name» «relation.leftEndingKey.type.transformType»,
					CONSTRAINT fk_«relation.leftEndingKey.name» FOREIGN KEY («relation.leftEndingKey.name»)
						REFERENCES «relation.leftEndingEntity.name»(«relation.leftEndingKey.name»),
					«relation.rightEndingKey.name» «relation.rightEndingKey.type.transformType»,
					CONSTRAINT fk_«relation.rightEndingKey.name» FOREIGN KEY («relation.rightEndingKey.name»)
						REFERENCES «relation.rightEndingEntity.name»(«relation.rightEndingKey.name»)
				);
			«ENDFOR»
		'''
		)
	}
	
	private def Set<Attribute> getAllAttributes(Entity entity) {
		val attributes = newHashSet
		attributes += entity.attributes
		for (parent : entity.isA) {
			attributes += parent.allAttributes
		}
		return attributes
	}
	
	private def transformType(AttributeType type) {
		switch (type) {
			case AttributeType.BOOLEAN: {
				return 'bit'
			}
			case AttributeType.DATETIME: {
				return 'datetime'
			}
			case AttributeType.DOUBLE: {
				return 'real'
			}
			case AttributeType.INT: {
				return 'int'
			}
			case AttributeType.STRING: {
				return 'varchar(255)'
			}
		}
	}
	
	private def getName(Relation relation) {
		return relation.leftEnding.target.name + 'To' + relation.rightEnding.target.name
	}
	
	private def getLeftEndingEntity(Relation relation) {
		return relation.leftEnding.target
	}
	
	private def getLeftEndingKey(Relation relation) {
		return relation.leftEndingEntity.key
	}
	
	private def getRightEndingEntity(Relation relation) {
		return relation.rightEnding.target
	}
	
	private def getRightEndingKey(Relation relation) {
		return relation.rightEndingEntity.key
	}
	
}
