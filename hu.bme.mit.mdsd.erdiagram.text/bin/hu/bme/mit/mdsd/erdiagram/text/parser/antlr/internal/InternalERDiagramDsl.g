/*
 * generated by Xtext 2.20.0
 */
grammar InternalERDiagramDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package hu.bme.mit.mdsd.erdiagram.text.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.mit.mdsd.erdiagram.text.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.mit.mdsd.erdiagram.text.services.ERDiagramDslGrammarAccess;

}

@parser::members {

 	private ERDiagramDslGrammarAccess grammarAccess;

    public InternalERDiagramDslParser(TokenStream input, ERDiagramDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ERDiagram";
   	}

   	@Override
   	protected ERDiagramDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleERDiagram
entryRuleERDiagram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getERDiagramRule()); }
	iv_ruleERDiagram=ruleERDiagram
	{ $current=$iv_ruleERDiagram.current; }
	EOF;

// Rule ERDiagram
ruleERDiagram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getERDiagramAccess().getEntitiesEntityParserRuleCall_0_0());
				}
				lv_entities_0_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getERDiagramRule());
					}
					add(
						$current,
						"entities",
						lv_entities_0_0,
						"hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getERDiagramAccess().getRelationRelationParserRuleCall_1_0());
				}
				lv_relation_1_0=ruleRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getERDiagramRule());
					}
					add(
						$current,
						"relation",
						lv_relation_1_0,
						"hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.Relation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entity'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getEntityKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='key'
			{
				newLeafNode(otherlv_2, grammarAccess.getEntityAccess().getKeyKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEntityRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getEntityAccess().getKeyAttributeCrossReference_2_1_0());
					}
				)
			)
		)?
		(
			otherlv_4='isA'
			{
				newLeafNode(otherlv_4, grammarAccess.getEntityAccess().getIsAKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEntityRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getEntityAccess().getIsAEntityCrossReference_3_1_0());
					}
				)
			)
		)*
		(
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEntityAccess().getAttributesAttributeParserRuleCall_4_1_0());
					}
					lv_attributes_7_0=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEntityRule());
						}
						add(
							$current,
							"attributes",
							lv_attributes_7_0,
							"hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.Attribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getEntityAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEntityAccess().getAttributesAttributeParserRuleCall_4_2_1_0());
						}
						lv_attributes_9_0=ruleAttribute
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEntityRule());
							}
							add(
								$current,
								"attributes",
								lv_attributes_9_0,
								"hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.Attribute");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_4_3());
			}
		)?
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getTypeAttributeTypeEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleAttributeType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.AttributeType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_isKey_3_0='key'
				{
					newLeafNode(lv_isKey_3_0, grammarAccess.getAttributeAccess().getIsKeyKeyKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed($current, "isKey", true, "key");
				}
			)
		)?
	)
;

// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	iv_ruleRelation=ruleRelation
	{ $current=$iv_ruleRelation.current; }
	EOF;

// Rule Relation
ruleRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationAccess().getLeftEndingRelationEndingParserRuleCall_0_0());
				}
				lv_leftEnding_0_0=ruleRelationEnding
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationRule());
					}
					set(
						$current,
						"leftEnding",
						lv_leftEnding_0_0,
						"hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.RelationEnding");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='is related with'
		{
			newLeafNode(otherlv_1, grammarAccess.getRelationAccess().getIsRelatedWithKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationAccess().getRightEndingRelationEndingParserRuleCall_2_0());
				}
				lv_rightEnding_2_0=ruleRelationEnding
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationRule());
					}
					set(
						$current,
						"rightEnding",
						lv_rightEnding_2_0,
						"hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.RelationEnding");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRelationEnding
entryRuleRelationEnding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationEndingRule()); }
	iv_ruleRelationEnding=ruleRelationEnding
	{ $current=$iv_ruleRelationEnding.current; }
	EOF;

// Rule RelationEnding
ruleRelationEnding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getRelationEndingAccess().getUnorderedGroup_0());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRelationEndingAccess().getUnorderedGroup_0(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getRelationEndingAccess().getUnorderedGroup_0(), 0);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getRelationEndingAccess().getMultiplicityMultiplicityTypeEnumRuleCall_0_0_0());
									}
									lv_multiplicity_1_0=ruleMultiplicityType
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getRelationEndingRule());
										}
										set(
											$current,
											"multiplicity",
											lv_multiplicity_1_0,
											"hu.bme.mit.mdsd.erdiagram.text.ERDiagramDsl.MultiplicityType");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRelationEndingAccess().getUnorderedGroup_0());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRelationEndingAccess().getUnorderedGroup_0(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getRelationEndingAccess().getUnorderedGroup_0(), 1);
					}
								({true}?=>((
									lv_nullable_2_0='nullable'
									{
										newLeafNode(lv_nullable_2_0, grammarAccess.getRelationEndingAccess().getNullableNullableKeyword_0_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getRelationEndingRule());
										}
										setWithLastConsumed($current, "nullable", true, "nullable");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRelationEndingAccess().getUnorderedGroup_0());
					}
				)
			)
					)+
					{getUnorderedGroupHelper().canLeave(grammarAccess.getRelationEndingAccess().getUnorderedGroup_0())}?
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getRelationEndingAccess().getUnorderedGroup_0());
				}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationEndingRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getRelationEndingAccess().getTargetEntityCrossReference_1_0());
				}
			)
		)
	)
;

// Rule AttributeType
ruleAttributeType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='int'
			{
				$current = grammarAccess.getAttributeTypeAccess().getINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAttributeTypeAccess().getINTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='double'
			{
				$current = grammarAccess.getAttributeTypeAccess().getDOUBLEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAttributeTypeAccess().getDOUBLEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='string'
			{
				$current = grammarAccess.getAttributeTypeAccess().getSTRINGEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAttributeTypeAccess().getSTRINGEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='boolean'
			{
				$current = grammarAccess.getAttributeTypeAccess().getBOOLEANEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAttributeTypeAccess().getBOOLEANEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='datetime'
			{
				$current = grammarAccess.getAttributeTypeAccess().getDATETIMEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAttributeTypeAccess().getDATETIMEEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule MultiplicityType
ruleMultiplicityType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='one'
			{
				$current = grammarAccess.getMultiplicityTypeAccess().getOneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicityTypeAccess().getOneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='many'
			{
				$current = grammarAccess.getMultiplicityTypeAccess().getManyEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicityTypeAccess().getManyEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
